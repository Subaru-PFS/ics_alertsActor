# Template for all keyword alerts:
#    alertType: a name, to help any consumers
#    call: True, False, or an object, method pair, where we find the named object
#          and call the corresponding method.
#          If True, call a generic callback for this alertType
#    alertFmt: if non-null, an f-string evaluated inside the call method. It is expected
#              to have the alertCall() argument variables available to it, plus "value".
#              This may be the biggest security hole ever put into a program.
#
# The call method is called with:
#    alertCall(fullReply, actorName, keyName, keyIndex)
#
# Note that the base template "alert" is actually a trigger: it is always called
# when a new keyword value is received.
#
_alert: &ALERT
  alertType: trigger
  call: True
  alertFmt: null
# Template for an alert with simple limits:
#   limits: a numeric pair of non-inclusive limits, with NaN for
#           unused limits. I.e. trigger if (min <= val or val >=  max)
#
_limitsAlert: &LIMITS_ALERT
  <<: *ALERT
  alertType: limits
  limits: [null, null]

# Template for regexp match alerts:
#   re: a regular expression
#   invert: bool, whether or not to invert the match sense
#
_regexpAlert: &REGEXP_ALERT
  <<: *ALERT
  alertType: regexp
  pattern: null
  invert: False

_viscuAlert: &VISCU_ALERT
  <<: *ALERT
  alertType: viscu

_nircuAlert: &NIRCU_ALERT
  <<: *ALERT
  alertType: nircu


################################################################
#
# Actual alerts below
#

# We group all keyword alerts by actor
#
actors:
  charis:                       # Just for pre-commissioning testing
    temps[0]:
      <<: *LIMITS_ALERT
      limits: [null, 40.9]
    temps:
      <<: *ALERT
      call: charis.checkTempRange
    motor6status[6]:
      <<: *REGEXP_ALERT
      pattern: 'limit switch error'

  meb:                          # MCS E-Box
    flow:
      <<: *LIMITS_ALERT
      limits: [0.0, null]
      alertFmt: 'coolant flow has stopped'
    temps[0]:
      <<: *LIMITS_ALERT
      limits: [10.0, 25.0]
      alertFmt: 'temperature out of range'

  xcu_{cam}:                    # All XCUs
    pcmPower1[2]:
      <<: *LIMITS_ALERT
      limits: [27, null]
      alertFmt: '{name} 24V-UPS Input power is failing!!: {value}V'
    pcmPower2[2]:
      <<: *LIMITS_ALERT
      limits: [24, null]
      alertFmt: '{name} 24V-AUX Input power is failing!!: {value}V'
    ionpump1Errors[1]:
      <<: *REGEXP_ALERT
      alertFmt: '{name} ionPump1 : {value} !!'
    ionpump2Errors[1]:
      <<: *REGEXP_ALERT
      alertFmt: '{name} ionPump2 : {value} !!'
    coolerStatus[2]:
      <<: *REGEXP_ALERT
      alertFmt: '{name} COOLER : {value} !!'
    pressure:
      <<: *VISCU_ALERT
      alertFmt: '{name} pressure is too high : {value}Torr !!'
    turboSpeed:
      <<: *VISCU_ALERT
      alertFmt: '{name} turbo speed is too low : {value}RPM !!'
    coolerTemps[1]:
      <<: *VISCU_ALERT
      alertFmt: '{name} Cooler reject is too high : {value}C !!'
    coolerTemps[3]:
      <<: *VISCU_ALERT
      alertFmt: '{name} Cooler power is out of range : {value}W !!'
    temps[10]:
      <<: *VISCU_ALERT
      alertFmt: '{name} Detector strap 1 temperature is too high : {value}K !!'
    temps[11]:
      <<: *VISCU_ALERT
      alertFmt: '{name} Detector strap 2 temperature is too high : {value}K !!'

    ionpump1[0]:
      <<: *ALERT
      call: xcu.ionpumpState
      alertFmt: '{name} ionpump1 should be on !!'
    ionpump2[0]:
      <<: *ALERT
      call: xcu.ionpumpState
      alertFmt: '{name} ionpump2 should be on !!'
    gatevalve[1]:
      <<: *ALERT
      call: xcu.gatevalveState

  enu_{smId}:
    temps1:
      <<: *ALERT
      call: enu.checkTempRange
    temps2:
      <<: *ALERT
      call: enu.checkTempRange

  tests:
    keytest1:
      <<: *ALERT
      call: tests.checkTempRange
    keytest2[1]:
      <<: *LIMITS_ALERT
      limits: [0, 30]
      alertFmt: 'keytest2 is out of range !!: {value}'
    keytest3:
      <<: *LIMITS_ALERT
      limits: [null, 1e-06]
      alertFmt: 'keytest3 is too high!!: {value}'
